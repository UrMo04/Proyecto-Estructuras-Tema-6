# -*- coding: utf-8 -*-
"""PrimeraEntregaParcial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q4O_6MWuFvEH0QAplti-RBzdps62Ve89
"""

#REQUERIMENTOS
#Verificar si la lista está vacia
#Contar la cantidad de elementos existentes en la lista
#Imprimir en pantalla los elementos de la lista
#Agregar un elemento (Solo se agregaran por el inicio de la lista)
#Buscar un elemento en la lista
#Un método que sea propio del problema que se está tratando (Pueden seleccionar y definir cualquiera)

class Employee:
  def __init__(self, Nombre, Apellido, Email, Telefono, Especialidad, Cedula, Horas):
      self.Nombre = Nombre
      self.Apellido = Apellido
      self.Email = Email
      self.Telefono = Telefono
      self.Especialidad = Especialidad
      self.Cedula = Cedula
      self.Horas = Horas
      self.Salario = 5800
      self.siguiente = None

  def CalcularSalario(self):
     return self.Horas*self.Salario

  def getInfo(self):

      return (f"""Empleado:
                  Nombre: {self.Nombre}
                  Apellido: {self.Apellido}
                  Email: {self.Email}
                  Especialidad: {self.Especialidad}
                  Documento de identidad: {self.Cedula}
                  Horas asignadas: {self.Horas}
                  Salario: {self.CalcularSalario()}
              """)



class ListaSE:
  def __init__(self):
    self.primerEmpleado = None

  def AgregarInicio(self, Nombre, Apellido, Email, Telefono, Especialidad, Cedula, Horas):
    nuevoEmpleado = Employee(Nombre, Apellido, Email, Telefono, Especialidad, Cedula, Horas)
    #validamos si el primer elemento es nulo o vacio

    #Y este nuevo nodo será el primer elemento
    if self.primerEmpleado is None:
      self.primerEmpleado = nuevoEmpleado
      return

    #Si ya hay un elemento, ese primer elemento será el apuntador
    else:
      nuevoEmpleado.siguiente = self.primerEmpleado
      self.primerEmpleado = nuevoEmpleado

  #Verifica si el primer elemento/cabeza de la lista está vacio, si es así la lista está vacia igualmente
  def EstaVacia (self):
    return self.primerEmpleado == None

  #Cuenta la cantidad de elementos de la lista
  def CantidadElementos(self):
    contador = 0
    empleado = self.primerEmpleado
    while empleado is not None:
      if empleado.data is not None:
        contador += 1
      else:
        contador = contador
    return contador

  #Busca un empleado que tenga el valor buscado
  def buscar_nodo(self, valor):
    empleado = self.primerEmpleado
    while empleado != None:
        if(empleado.Cedula==valor):
            return True
        empleado = empleado.siguiente
    return False

  #Imprime todos los datos de cada empleado
  def imprimir_empleados(self):
    empleado = self.primerEmpleado
    while empleado!=None:
      print(empleado.getInfo())
      empleado=empleado.siguiente
    return

  #Pide una cedula como parametro y busca en la lista un empleado cuya cedula coincida, luego muestra su salario
  def Salario_Cedula(self, Cedula):
    empleado = self.primerEmpleado
    while empleado!=None:
      if(empleado.Cedula == Cedula):
        print(f"El empleado de cedula {Cedula} tiene un salario de: {empleado.CalcularSalario()}")
      empleado = empleado.siguiente
    return



  #https://pythondiario.com/2018/07/linked-list-listas-enlazadas.html

listaSimple = ListaSE()
listaSimple.AgregarInicio("Julio" , "Aragán" , "julioisreal@outlook.com" , 3223286703 , "Ingeniero de Pisos" , 127748704 , 24)
listaSimple.AgregarInicio("Angélica" , "Beltrán" , "ange0323@outlook.com" , 3159762458 , "Manager de ventas" , 101688704 , 32)
listaSimple.AgregarInicio("Julio" , "Guerrero" , "julioisreal999@outlook.com" , 3244286543 , "Ingeniero Industrial" , 152654704 , 48)

listaSimple.imprimir_empleados()

print("\n")

listaSimple.Salario_Cedula(101688704)